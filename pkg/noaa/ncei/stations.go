package ncei

var (
	// The data endpoint is used for actually fetching the locations.
	StationEndpoint = AddToEndpoint(BaseEndpoint, "stations")

	// Valid Query Parameters
	StationParameters = []string{
		// datasetid [Optional]
		// Accepts a valid dataset id or a chain of dataset ids separated by ampersands.
		// Data returned will be supported by dataset(s) specified
		"datasetid",

		// locationid [Optional]
		// Accepts a valid location id or a chain of location ids separated by ampersands.
		// Data returned will contain data for the location(s) specified
		"locationid",

		// datacategoryid [Optional]
		// Accepts a valid data category id or an array of data category ids. Stations
		// returned will be associated with the data category(ies) specified
		"datacategoryid",

		// datatypeid [Optional]
		// Accepts a valid data type id or a chain of data type ids separated by ampersands.
		// Stations returned will contain all of the data type(s) specified
		"datatypeid",

		// extent [Optional]
		// The desired geographical extent for search. Designed to take a parameter
		// generated by Google Maps API V3 LatLngBounds.toUrlValue. Stations returned must be
		// located within the extent specified.
		"extent",

		// startdate [Optional]
		// Accepts valid ISO formated date (yyyy-mm-dd). Data returned will have data after
		// the specified date. Paramater can be use independently of enddate
		"startdate",

		// enddate [Optional]
		// Accepts valid ISO formated date (yyyy-mm-dd). Data returned will have data before the
		// specified date. Paramater can be use independently of startdate
		"enddate",

		//sortfield [Optional]
		// The field to sort results by. Supports id, name, mindate, maxdate, and datacoverage
		// fields
		"sortfield",

		// sortorder [	Optional]
		// Which order to sort by, asc or desc. Defaults to asc
		"sortorder",

		// limit [Optional]
		// Defaults to 25, limits the number of results in the response. Maximum is 1000
		"limit",

		// offset [Optional]
		// Defaults to 0, used to offset the resultlist. The example would begin with record 24
		"offset",
	}
)

type Station struct {
	Elevation     float64 `json:"elevation,omitempty"`
	MinDate       string  `json:"mindate,omitempty"`
	MaxDate       string  `json:"maxdate,omitempty"`
	Latitude      float64 `json:"latitude,omitempty"`
	Name          string  `json:"name,omitempty"`
	DataCoverage  string  `json:"datacoverage,omitempty"`
	ID            string  `json:"id,omitempty"`
	ElevationUnit string  `json:"elevationUnit,omitempty"`
	Longitude     float64 `json:"longitude,omitempty"`
}
